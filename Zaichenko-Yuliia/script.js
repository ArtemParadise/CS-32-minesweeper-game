"use strict";

/* ========= –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ —Å—Ç–∞–Ω—ñ–≤ ========= */
const CellState = { CLOSED: "closed", OPEN: "open", FLAG: "flag" };
const GameStatus = { RUNNING: "running", WIN: "win", LOSE: "lose" };

/* ========= –ú–æ–¥–µ–ª—å –∫–ª—ñ—Ç–∏–Ω–∫–∏ ========= */
function makeCell(hasMine = false) {
  return {
    hasMine, // –±—É–ª–µ–≤–µ
    neighborMines: 0, // –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ–Ω –Ω–∞–≤–∫–æ–ª–æ (0..8)
    state: CellState.CLOSED, // closed | open | flag
  };
}

/* ========= –ú–æ–¥–µ–ª—å —Å—Ç–∞–Ω—É –≥—Ä–∏ ========= */
function makeGameState(rows, cols, mines) {
  return {
    rows,
    cols,
    mines,
    status: GameStatus.RUNNING,
    flagsLeft: mines,
    openedSafe: 0,
    board: Array.from({ length: rows }, () =>
      Array.from({ length: cols }, () => makeCell(false))
    ),
  };
}

/* ========= –£—Ç–∏–ª—ñ—Ç–∏ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –ø–æ–ª–µ–º ========= */
function inBounds(game, r, c) {
  return r >= 0 && r < game.rows && c >= 0 && c < game.cols;
}

const DIRS = [
  [-1, -1],
  [-1, 0],
  [-1, 1],
  [0, -1],
  [0, 1],
  [1, -1],
  [1, 0],
  [1, 1],
];

function neighbors(game, r, c) {
  const ns = [];
  for (const [dr, dc] of DIRS) {
    const nr = r + dr,
      nc = c + dc;
    if (inBounds(game, nr, nc)) ns.push([nr, nc]);
  }
  return ns;
}

/* ========= –†–æ–∑—Å—Ç–∞–Ω–æ–≤–∫–∞ –º—ñ–Ω —ñ –ø—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ —Å—É—Å—ñ–¥—ñ–≤ ========= */
function placeMinesRandomly(game) {
  const total = game.rows * game.cols;
  if (game.mines >= total) throw new Error("–ó–∞–Ω–∞–¥—Ç–æ –±–∞–≥–∞—Ç–æ –º—ñ–Ω");

  const used = new Set();
  while (used.size < game.mines) {
    const idx = Math.floor(Math.random() * total);
    if (used.has(idx)) continue;
    used.add(idx);
    const r = Math.floor(idx / game.cols);
    const c = idx % game.cols;
    game.board[r][c].hasMine = true;
  }

  for (let r = 0; r < game.rows; r++) {
    for (let c = 0; c < game.cols; c++) {
      if (game.board[r][c].hasMine) {
        game.board[r][c].neighborMines = 0;
        continue;
      }
      let cnt = 0;
      for (const [nr, nc] of neighbors(game, r, c)) {
        if (game.board[nr][nc].hasMine) cnt++;
      }
      game.board[r][c].neighborMines = cnt;
    }
  }
}

/* ========= –î–æ–ø–æ–º—ñ–∂–Ω–∏–π –≤–∏–≤—ñ–¥ —É –∫–æ–Ω—Å–æ–ª—å ========= */
function boardToMineMap(game) {
  return game.board.map((row) =>
    row.map((cell) => (cell.hasMine ? "üí£" : "."))
  );
}

function boardToNumbers(game) {
  return game.board.map((row) =>
    row.map((cell) => (cell.hasMine ? "X" : String(cell.neighborMines)))
  );
}

function printBoardPretty(grid, title) {
  console.log(title);
  const asStrings = grid.map((row) => row.join(" "));
  console.log(asStrings.join("\n"));
}

/* ========= –î–µ–º–æ-—ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è (10√ó10, 15 –º—ñ–Ω) ========= */
const game = makeGameState(10, 10, 15);
placeMinesRandomly(game);

/* ========= –í–∏–≤—ñ–¥, —è–∫–∏–π –≤–∏–º–∞–≥–∞—î –∑–∞–≤–¥–∞–Ω–Ω—è ========= */
console.log("=== –°—Ç–∞–Ω –≥—Ä–∏ (–º–µ—Ç–∞–¥–∞–Ω—ñ) ===");
console.log({
  rows: game.rows,
  cols: game.cols,
  mines: game.mines,
  status: game.status,
  flagsLeft: game.flagsLeft,
});

console.log("=== –ü—Ä–∏–∫–ª–∞–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –∫–ª—ñ—Ç–∏–Ω–∫–∏ [0][0] ===");
console.log(game.board[0][0]); 

console.log("=== –î–≤–æ–≤–∏–º—ñ—Ä–Ω–∏–π –º–∞—Å–∏–≤ –æ–±‚Äô—î–∫—Ç—ñ–≤ (–ø–µ—Ä—à–∏–π —Ä—è–¥–æ–∫) ===");
console.log(game.board[0]); 

printBoardPretty(boardToMineMap(game), "=== –ö–∞—Ä—Ç–∞ –º—ñ–Ω (üí£ | .) ===");
printBoardPretty(boardToNumbers(game), "=== –ö–∞—Ä—Ç–∞ —á–∏—Å–µ–ª (X = –º—ñ–Ω–∞) ===");

console.log("=== –ö–∞—Ä—Ç–∞ —á–∏—Å–µ–ª (console.table) ===");
console.table(boardToNumbers(game));

/* ========= (–ù–µ –æ–±–æ–≤‚Äô—è–∑–∫–æ–≤–æ) –ü—Ä–∏–∫–ª–∞–¥–∏ –∑–º—ñ–Ω —Å—Ç–∞–Ω—É ========= */
function toggleFlag(game, r, c) {
  const cell = game.board[r][c];
  if (cell.state === CellState.OPEN) return; 
  if (cell.state === CellState.FLAG) {
    cell.state = CellState.CLOSED;
    game.flagsLeft++;
  } else if (game.flagsLeft > 0) {
    cell.state = CellState.FLAG;
    game.flagsLeft--;
  }
}

function openCell(game, r, c) {
  const cell = game.board[r][c];
  if (cell.state !== CellState.CLOSED) return;
  cell.state = CellState.OPEN;

  if (cell.hasMine) {
    game.status = GameStatus.LOSE;
    return;
  }
  game.openedSafe++;
  if (cell.neighborMines === 0) {
    for (const [nr, nc] of neighbors(game, r, c)) {
      if (
        game.board[nr][nc].state === CellState.CLOSED &&
        !game.board[nr][nc].hasMine
      ) {
        openCell(game, nr, nc);
      }
    }
  }
  const totalSafe = game.rows * game.cols - game.mines;
  if (game.openedSafe === totalSafe) game.status = GameStatus.WIN;
}
toggleFlag(game, 0, 0);
openCell(game, 5, 5);
console.log("=== –ü—ñ—Å–ª—è –¥–µ–∫—ñ–ª—å–∫–æ—Ö –¥—ñ–π ===");
console.log({
  status: game.status,
  flagsLeft: game.flagsLeft,
  openedSafe: game.openedSafe,
});
