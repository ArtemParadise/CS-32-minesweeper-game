function createCell(hasMine = false, adjacentMines = 0, state = "closed") {
    return {
      hasMine: hasMine,             // —á–∏ —î –º—ñ–Ω–∞ (true/false)
      adjacentMines: adjacentMines, // –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ–Ω –Ω–∞–≤–∫–æ–ª–æ (0-8)
      state: state                  // "closed" | "open" | "flagged"
    };
  }
  
// 2. –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è (–¥–≤–æ–≤–∏–º—ñ—Ä–Ω–∏–π –º–∞—Å–∏–≤)
function createField(rows, cols) {
    const field = [];
    for (let r = 0; r < rows; r++) {
      const row = [];
      for (let c = 0; c < cols; c++) {
        row.push(createCell());
      }
      field.push(row);
    }
    return field;
  }

function createGameState(rows, cols, minesCount) {
    return {
      rows: rows,                   // –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä—è–¥–∫—ñ–≤
      cols: cols,                   // –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ–ª–æ–Ω–æ–∫
      minesCount: minesCount,       // –∑–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ–Ω
      status: "in_progress",        // "in_progress" | "win" | "lose"
      field: createField(rows, cols) // —Å–∞–º–µ –ø–æ–ª–µ (–¥–≤–æ–≤–∏–º—ñ—Ä–Ω–∏–π –º–∞—Å–∏–≤ –∫–ª—ñ—Ç–∏–Ω–æ–∫)
    };
  }


function generateField(rows, cols, mines) {
  const field = createField(rows, cols);

  let minesPlaced = 0;
  while (minesPlaced < mines) {
    const r = Math.floor(Math.random() * rows);
    const c = Math.floor(Math.random() * cols);
    if (!field[r][c].hasMine) {
      field[r][c].hasMine = true;
      minesPlaced++;
    }
  }

  for (let r = 0; r < rows; r++) {
    for (let c = 0; c < cols; c++) {
      if (!field[r][c].hasMine) {
        field[r][c].adjacentMines = countNeighbourMines(field, r, c);
      }
    }
  }

  return field;
}

function countNeighbourMines(field, row, col) {
  const rows = field.length;
  const cols = field[0].length;
  let count = 0;
  for (let directionRow = -1; directionRow <= 1; directionRow++) {
    for (let directionCol = -1; directionCol <= 1; directionCol++) {
      if (directionRow === 0 && directionCol === 0) continue;
      const neighbourRow = row + directionRow;
      const neighbourCol = col + directionCol;
      if (neighbourRow >= 0 && neighbourRow < rows && neighbourCol >= 0 && neighbourCol < cols) {
        if (field[neighbourRow][neighbourCol].hasMine) count++;
      }
    }
  }
  return count;
}


function checkWin(game) {
  let opened = 0;
  const totalCells = game.rows * game.cols;
  const safeCells = totalCells - game.minesCount;

  for (let r = 0; r < game.rows; r++) {
    for (let c = 0; c < game.cols; c++) {
      if (game.field[r][c].state === "open" && !game.field[r][c].hasMine) {
        opened++;
      }
    }
  }

  if (opened === safeCells) {
    game.status = "win";
    stopTimer();
    setTimeout(() => {
      console.log("üèÜ –í–ò–ì–†–ê–®! –£—Å—ñ –±–µ–∑–ø–µ—á–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –≤—ñ–¥–∫—Ä–∏—Ç–æ!");
      alert("–¢–∏ –≤–∏–≥—Ä–∞–≤. –í—Å—ñ –±–µ–∑–ø–µ—á–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –≤—ñ–¥–∫—Ä–∏—Ç–æ. –î–ª—è –Ω–æ–≤–æ—ó –≥—Ä–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É PLAY.");
  }, 50); // 50 –º—Å –∑–∞–∑–≤–∏—á–∞–π –¥–æ—Å—Ç–∞—Ç–Ω—å–æ
  }
}

function openCell(game, row, col) {
  if (timerId === null) startTimer();
  const cell = game.field[row][col];
  if (cell.state !== "closed" || game.status !== "in_progress") return;
  if (cell.hasMine) {
    cell.state = "open";
    game.status = "lose";
    stopTimer(); // –∑—É–ø–∏–Ω—è—î–º–æ —Ç–∞–π–º–µ—Ä –ø—ñ—Å–ª—è –ø—Ä–æ–≥—Ä–∞—à—É
    // üîπ –í—ñ–¥–∫—Ä–∏—Ç–∏ –≤—Å—ñ –º—ñ–Ω–∏
    for (let r = 0; r < game.rows; r++) {
      for (let c = 0; c < game.cols; c++) {
        const currentCell = game.field[r][c];
        if (currentCell.hasMine) {
          currentCell.state = "open";
        }
      }
    }
    
    setTimeout(() => {
      console.log("üí• –ì—Ä–∞–≤–µ—Ü—å –ø—Ä–æ–≥—Ä–∞–≤!");
      alert("–¢–∏ –ø—Ä–æ–≥—Ä–∞–≤. –î–ª—è –Ω–æ–≤–æ—ó –≥—Ä–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É PLAY.");
    }, 50);

    return;
  }
  cell.state = "open";
  if (cell.adjacentMines === 0) {
    for (let directionRow = -1; directionRow <= 1; directionRow++) {
      for (let directionCol = -1; directionCol <= 1; directionCol++) {
        if (directionRow === 0 && directionCol === 0) continue;
        const neighbourRow = row + directionRow;
        const neighbourCol = col + directionCol;
        if (neighbourRow >= 0 && neighbourRow < game.rows && neighbourCol >= 0 && neighbourCol < game.cols) {
          openCell(game, neighbourRow, neighbourCol);
        }
      }
    }
  }
  // üîπ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∏–≥—Ä–∞—à –ø—ñ—Å–ª—è –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è –∫–ª—ñ—Ç–∏–Ω–∫–∏
  if (checkWin(game)) {
    game.status = "win";
    stopTimer();
  }
}


function toggleFlag(game, row, col) {
  const cell = game.field[row][col];
  if (cell.state === "closed") {
    cell.state = "flagged";
  } else if (cell.state === "flagged") {
    cell.state = "closed";
  }
  console.log(
    `toggleFlag: cell [${row},${col}] now is "${cell.state}"`
  );

}






// === –§–£–ù–ö–¶–Ü–Ø –†–ï–ù–î–ï–†–ò–ù–ì–£ –Ü–ì–†–û–í–û–ì–û –ü–û–õ–Ø ===
function renderGameField(game) {
  const grid = document.querySelector('.grid');
  if (!grid || !game) return;

  // –û—á–∏—â—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—î –ø–æ–ª–µ
  grid.innerHTML = '';
  
  // –ü—Ä–æ—Ö–æ–¥–∏–º–æ –ø–æ –≤—Å—ñ—Ö –∫–ª—ñ—Ç–∏–Ω–∫–∞—Ö —ñ–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è
  for (let r = 0; r < game.rows; r++) {
    for (let c = 0; c < game.cols; c++) {
      // –°—Ç–≤–æ—Ä—é—î–º–æ HTML –µ–ª–µ–º–µ–Ω—Ç –∫–ª—ñ—Ç–∏–Ω–∫–∏
      const cell = document.createElement('div');
      cell.className = 'cell';
      cell.dataset.row = r;
      cell.dataset.col = c;
      
      // –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ –∑ —ñ–≥—Ä–æ–≤–æ–≥–æ —Å—Ç–∞–Ω—É
      const gameCell = game.field[r][c];
      
      // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Å—Ç–∞–Ω –∫–ª—ñ—Ç–∏–Ω–∫–∏ —Ç–∞ –¥–æ–¥–∞—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ –∫–ª–∞—Å–∏
      if (gameCell.state === "open") {
        cell.classList.add('open');
        if (gameCell.hasMine) {
          // –Ø–∫—â–æ —Ü–µ –º—ñ–Ω–∞ - –ø–æ–∫–∞–∑—É—î–º–æ —Å–∏–º–≤–æ–ª –º—ñ–Ω–∏
          cell.classList.add('mine');
          cell.innerHTML = 'üí£';
        } else if (gameCell.adjacentMines > 0) {
          // –Ø–∫—â–æ —î —Å—É—Å—ñ–¥–Ω—ñ –º—ñ–Ω–∏ - –ø–æ–∫–∞–∑—É—î–º–æ —ó—Ö –∫—ñ–ª—å–∫—ñ—Å—Ç—å
          cell.classList.add(`num-${gameCell.adjacentMines}`);
          cell.textContent = gameCell.adjacentMines;
        }
      } else if (gameCell.state === "flagged") {
        // –Ø–∫—â–æ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –ø–æ–∑–Ω–∞—á–µ–Ω–∞ –ø—Ä–∞–ø–æ—Ä—Ü–µ–º
        cell.classList.add('flag');
        cell.innerHTML = 'üö©';
      } else {
        // –Ø–∫—â–æ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –∑–∞–∫—Ä–∏—Ç–∞
        cell.classList.add('closed');
      }
      
      // –î–æ–¥–∞—î–º–æ –∫–ª—ñ—Ç–∏–Ω–∫—É –¥–æ —Å—ñ—Ç–∫–∏
      grid.appendChild(cell);
    }
  }
}


// === –ì–õ–û–ë–ê–õ–¨–ù–ê –ó–ú–Ü–ù–ù–ê –ì–†–ò ===
let game = null;

// === –§–£–ù–ö–¶–Ü–Ø –î–õ–Ø –ü–û–ß–ê–¢–ö–£ –ù–û–í–û–á –ì–†–ò ===
function startNewGame() {
  game = createGameState(9, 9, 5);        // —Å—Ç–≤–æ—Ä—é—î–º–æ —ñ–≥—Ä–æ–≤–∏–π —Å—Ç–∞–Ω
  game.field = generateField(game.rows, game.cols, game.minesCount); // –≥–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–ª–µ
  // –û–±–Ω—É–ª—è—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø—Ä–∞–ø–æ—Ä—Ü—ñ–≤
  flagsLeft = game.minesCount;
  updateFlagsCount();
  renderGameField(game);               // —Ä–µ–Ω–¥–µ—Ä–∏–º–æ –ø–æ–ª–µ

  stopTimer();

  // –û–±–Ω—É–ª—è—î–º–æ —Ç–∞–π–º–µ—Ä –Ω–∞ –ø–∞–Ω–µ–ª—ñ
  const timerElement = document.getElementById('timer');
  if (timerElement) timerElement.textContent = String(0).padStart(3, '0');

  console.log("üéÆ –ù–æ–≤–∞ –≥—Ä–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–∞!");
  console.log("–°—Ç–∞–Ω –≥—Ä–∏:", game);
}

// === –°–¢–ê–†–¢ –ì–†–ò –ü–û –ö–ù–û–ü–¶–Ü PLAY ===
document.addEventListener('DOMContentLoaded', function() {
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –∫–Ω–æ–ø–∫—É –∑–∞ –∫–ª–∞—Å–æ–º (–Ω–µ –∑–∞ ID!)
  const playButton = document.querySelector('.play-btn');
  
  if (playButton) {
    playButton.addEventListener("click", startNewGame);
  }

  // === –û–ë–†–û–ë–ö–ê –ö–õ–Ü–ö–Ü–í ===
  
  // –õ—ñ–≤–∏–π –∫–ª—ñ–∫ (–≤—ñ–¥–∫—Ä–∏—Ç–∏ –∫–ª—ñ—Ç–∏–Ω–∫—É)
  document.querySelector('.grid').addEventListener('click', (e) => {
    const cell = e.target;
    if (!cell.classList.contains('cell') || !game) return;

    // –Ø–∫—â–æ –≥—Ä–∞ –≤–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ‚Äî –Ω–µ —Ä–µ–∞–≥—É—î–º–æ
  if (game.status !== "in_progress") return;

    const row = parseInt(cell.dataset.row);
    const col = parseInt(cell.dataset.col);

    openCell(game, row, col); // –≤—ñ–¥–∫—Ä–∏–≤–∞—î–º–æ –∫–ª—ñ—Ç–∏–Ω–∫—É
    renderGameField(game);    // –ø–µ—Ä–µ–º–∞–ª—å–æ–≤—É—î–º–æ –ø—ñ—Å–ª—è –∑–º—ñ–Ω
  });

  // –ü—Ä–∞–≤–∏–π –∫–ª—ñ–∫ (–ø–æ—Å—Ç–∞–≤–∏—Ç–∏/–∑–Ω—è—Ç–∏ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å)
  document.querySelector('.grid').addEventListener('contextmenu', (e) => {
    e.preventDefault(); // –≤—ñ–¥–º—ñ–Ω—è—î–º–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–µ –º–µ–Ω—é

    const cell = e.target;
    if (!cell.classList.contains('cell') || !game) return;

    // –ë–ª–æ–∫—É—î–º–æ, —è–∫—â–æ –≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞
  if (game.status !== "in_progress") return;

    const row = parseInt(cell.dataset.row);
    const col = parseInt(cell.dataset.col);

    toggleFlag(game, row, col); // —Å—Ç–∞–≤–∏–º–æ –∞–±–æ –∑–Ω—ñ–º–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä–µ—Ü—å
    renderGameField(game);      // –ø–µ—Ä–µ–º–∞–ª—å–æ–≤—É—î–º–æ –ø—ñ—Å–ª—è –∑–º—ñ–Ω
  });
});

let flagsLeft = 5; //  –∫—ñ–ª—å–∫—ñ—Å—Ç—å –º—ñ–Ω –Ω–∞ –ø–æ–ª—ñ

function updateFlagsCount() {
  const flagsElement = document.getElementById('flags-count');
  if (flagsElement) {
    // –í–∏–≤–æ–¥–∏–º–æ —Ç—Ä–∏ —Ü–∏—Ñ—Ä–∏ –∑ –≤–µ–¥—É—á–∏–º–∏ –Ω—É–ª—è–º–∏
    flagsElement.textContent = String(flagsLeft).padStart(3, '0');
  }
}

function toggleFlag(game, row, col) {
  const cell = game.field[row][col];

  if (cell.state === "closed" && flagsLeft > 0) {
    cell.state = "flagged";
    flagsLeft--;
  } else if (cell.state === "flagged") {
    cell.state = "closed";
    flagsLeft++;
  }

  updateFlagsCount(); // –æ–Ω–æ–≤–ª—é—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –ø—Ä–∞–ø–æ—Ä—Ü—ñ–≤
  console.log(
    `toggleFlag: cell [${row},${col}] now is "${cell.state}", flagsLeft=${flagsLeft}`
  );
}


let timerId = null;
let seconds = 0;

function startTimer() {
  if (timerId !== null) return;
  seconds = 0;

  timerId = setInterval(() => {
    seconds++;
    console.log("‚è±Ô∏è", seconds, "—Å–µ–∫");

    const timerElement = document.getElementById('timer'); // –±–µ—Ä–µ–º–æ –µ–ª–µ–º–µ–Ω—Ç –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ —ñ–Ω—Ç–µ—Ä–≤–∞–ª—É
    if (timerElement) {
      timerElement.textContent = String(seconds).padStart(3, '0');
    }
  }, 1000);
}

function stopTimer() {
  clearInterval(timerId);
  timerId = null;
  console.log("‚èπÔ∏è –¢–∞–π–º–µ—Ä –∑—É–ø–∏–Ω–µ–Ω–æ –Ω–∞", seconds, "—Å–µ–∫");
}